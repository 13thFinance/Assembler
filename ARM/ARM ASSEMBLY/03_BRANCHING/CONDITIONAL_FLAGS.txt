our condition code flags called N (negative), Z (zero), C (carry) and V (overflow)

N will be enabled if the result of the instruction yields a negative number. Disabled otherwise.
Z will be enabled if the result of the instruction yields a zero value. Disabled if nonzero.
C will be enabled if the result of the instruction yields a value that requires a 33rd bit to be fully represented. For instance an addition that overflows the 32 bit range of integers. There is a special case for C and subtractions where a non-borrowing subtraction enables it, disabled otherwise: subtracting a larger number to a smaller one enables C, but it will be disabled if the subtraction is done the other way round.
V will be enabled if the result of the instruction yields a value that cannot be represented in 32 bits two’s complement.

use cmp to compare values
ex: cmp r1, r2 //updates cpsr doing r1 - r2(the result of r1 MINUS r2), but r1 and r2 are not modified

If r2 had a value (strictly) greater than r1 then N would be enabled because r1-r2 would yield a negative result.
If r1 and r2 had the same value, then Z would be enabled because r1-r2 would be zero.
If r1 was 1 and r2 was 0 then r1-r2 would not borrow, so in this case C would be enabled. If the values were swapped (r1 was 0 and r2 was 1) then C would be disabled because the subtraction does borrow.
If r1 was 2147483647 (the largest positive integer in 32 bit two’s complement) and r2 was -1 then r1-r2 would be 2147483648 but such number cannot be represented in 32 bit two’s complement, so V would be enabled to signal this.

EQ (equal) When Z is enabled (Z is 1)
NE (not equal). When Z is disabled. (Z is 0)
GE (greater or equal than, in two’s complement). When both V and N are enabled or disabled (V is N)
LT (lower than, in two’s complement). This is the opposite of GE, so when V and N are not both enabled or disabled (V is not N)
GT (greather than, in two’s complement). When Z is disabled and N and V are both enabled or disabled (Z is 0, N is V)
LE (lower or equal than, in two’s complement). When Z is enabled or if not that, N and V are both enabled or disabled (Z is 1. If Z is not 1 then N is V)
MI (minus/negative) When N is enabled (N is 1)
PL (plus/positive or zero) When N is disabled (N is 0)
VS (overflow set) When V is enabled (V is 1)
VC (overflow clear) When V is disabled (V is 0)
HI (higher) When C is enabled and Z is disabled (C is 1 and Z is 0)
LS (lower or same) When C is disabled or Z is enabled (C is 0 or Z is 1)
CS/HS (carry set/higher or same) When C is enabled (C is 1)
CC/LO (carry clear/lower) When C is disabled (C is 0)

These conditions can be combined to our b instruction to generate new instructions. 
This way, beq will branch only if Z is 1. If the condition of a conditional branch is not met, 
then the branch is ignored and the next instruction will be run. 
It is the programmer task to make sure that the condition codes are properly set prior a conditional branch.
